
<!-- ====================================================================== -->
<!-- Slightly modified version of OIS Standard Build file.                  -->
<!-- Removed .java files from JAR                                           -->
<!-- ====================================================================== -->

<project name="FITS Build File" default="compile" basedir=".">

<!-- ===================== Property Definitions =========================== -->

  <property file="version.properties"/>
	
<!-- ==================== File and Directory Names ======================== -->

  <property name="app.name"              value="fits"/>
  <property name="app.longName"          value="File Information Toolset"/>	
  <property name="app.package"           value="edu.harvard.hul.ois.fits"/>
  <property name="fits.jar.name"	         	 value="${app.name}.jar"/>
  <property name="fits.jar.home"         value="lib-fits"/>
  <property name="src.dirs"	             value="src"/>
  <property name="test.dirs"             value="tests"/>
  <property name="javadoc.home"          value="javadoc"/>
  <property name="manifest.name"         value="MANIFEST.MF"/>
  <property name="output.location" 		 value="release_temp"/>
  <property name="junit.reports.dir"     value="test-generated-output/ant-junit-test-reports" />
  <property name="build.dir"             value="build" />

<!-- ===================== Compilation Control Options ==================== -->

<!--

  These properties control option settings on the Javac compiler when it
  is invoked using the <javac> task.

  compile.debug        Should compilation include the debug option?
  compile.deprecation  Should compilation include the deprecation option?
  compile.optimize     Should compilation include the optimize option?

-->

  <property name="compile.debug"       value="true"/>
  <property name="compile.deprecation" value="true"/>
  <property name="compile.optimize"    value="true"/>

<!-- ==================== Compilation Classpath =========================== -->

<!--

  Rather than relying on the CLASSPATH environment variable, Ant includes
  features that makes it easy to dynamically construct the classpath you
  need for each compilation.  The example below constructs the compile
  classpath to include the servlet.jar file, as well as the other components
  that Tomcat makes available to web applications automatically, plus anything
  that you explicitly added.

-->

  <path id="compile.classpath">
    <!-- Include all JAR files that will be included in lib -->
  	<!-- Some tool subdirectories may not have any JAR files but are included for future expansion -->
  	<pathelement path="${build.dir}"/>
    <fileset dir=".">
      <include name="lib/*.jar"/>
      <include name="lib/adltool/*.jar"/>
      <include name="lib/audioinfo/*.jar"/>
	  <include name="lib/droid/*.jar"/>
      <include name="lib/exiftool/*.jar"/>
      <include name="lib/ffident/*.jar"/>
      <include name="lib/fileinfo/*.jar"/>
      <include name="lib/fileutility/*.jar"/>
      <include name="lib/jhove/*.jar"/>
      <include name="lib/mediainfo/*.jar"/>
      <include name="lib/nzmetool/*.jar"/>
      <include name="lib/tika/*.jar"/>
      <include name="lib/xmlmetadata/*.jar"/>
    </fileset>
  </path>

  <path id="junit.classpath">
    <!-- Include all JAR files related to unit tests -->
    <fileset dir=".">
      <include name="lib-ant/*.jar" />
    </fileset>
  </path>

<!-- ==================== Compile Target ================================== -->

<!--

  The "compile" target transforms source files (from your "src" directory)
  into object files in the appropriate location in the build directory.

-->

  <target name="compile" description="Compile Java sources">

    <mkdir dir="${build.dir}"/>
    <javac debug="${compile.debug}"
           deprecation="${compile.deprecation}"
	       optimize="${compile.optimize}"
    	   destdir="${build.dir}">
    	<src path="${src.dirs}" />
        <src path="${test.dirs}" />
        <classpath refid="compile.classpath">
        </classpath>
    </javac>
  </target>


  <target name="compile-create-jar" depends="compile, check-build" description="Compile sources and create fits.jar">
    <fail unless="${build.present}" message="${build.dir} not present"/>
  	<mkdir dir="${fits.jar.home}"/>
    <antcall target="create-manifest" />
    <jar jarfile="${fits.jar.home}/${fits.jar.name}"
         update="true"
    	 manifest="${manifest.name}">
       <fileset dir="${build.dir}">
       <include name="**/*.class"/>
     </fileset>
    </jar>
    <antcall target="delete-manifest" />
  </target>

  <target name="clean-compile-jar" if="fits.jar.preset" depends="clean, compile-create-jar, check-fits-jar" description="Clean, compile all code and create a fits.jar">
  </target>


<!-- ==================== Clean Target ==================================== -->

<!--

  The "clean" target deletes any previous "build" and "dist" directory,
  so that you can be ensured the application can be built from scratch.

-->

  <target name="clean" description="Delete old build and dist directories">
    <delete dir="${build.dir}" quiet="true" />
    <delete dir="${fits.jar.home}" quiet="true"/>
  </target>


<!-- ===================== Create Tmp Jar Target ========================== 

  <target name="create-tmp-jar" depends="compile, check-build"
          description="Create the jar for this project">
  	<fail unless="${build.present}" message="${build.dir} no present"/>
    <antcall target="create-manifest" />
    <antcall target="create-tmp-jar-src" />
    <antcall target="delete-manifest" />
  </target>

  <target name="create-tmp-jar-src" depends="create-manifest">
    <jar jarfile="${fits.jar.home}/${fits.jar.name}"
         update="true"
	 manifest="${manifest.name}">
         <fileset dir="${build.dir}">
	   <include name="**/*.class"/>      
	   <include name="**/*.properties"/>
	   <include name="**/*.xml"/>
	 </fileset>
    </jar>
  </target>
-->

  <target name="create-manifest">
    
    <condition property="jar.version" 
               value="${build.version}">
      <and>
        <isset property="build.version" />
      </and>
    </condition>

    <tstamp>
      <format property="timestamp.isoformat"
              pattern="yyyy-MM-dd'T'HH:mm:ss"/>
    </tstamp>

    <condition property="build.timestamp" value="development" else="${timestamp.isoformat}">
      <not>
        <isset property="jar.version" />
      </not>
    </condition>

    <condition property="build.date" value="development" else="${TODAY}">
      <not>
        <isset property="jar.version" />
      </not>
    </condition>

    <condition property="jar.version" value="development">
      <not>
        <isset property="jar.version" />
      </not>
    </condition>

    <manifest file="${manifest.name}">
      <attribute name="Application-Name" value="${app.longName}"/>
      <attribute name="Specification-Title" value="${app.name} Java Classes"/>
      <attribute name="Specification-Version" value="${jar.version}"/>
      <attribute name="Implementation-Title" value="${app.package}"/>
      <attribute name="Implementation-Version" value="${jar.version}"/>
      <attribute name="Implementation-Vendor" value="OIS Harvard University Library"/>
      <attribute name="Build-Date" value="${build.date}"/>
      <attribute name="Build-Timestamp" value="${build.timestamp}"/>
    </manifest>
  </target>

  <target name="delete-manifest">
    <delete quiet="true" file="${manifest.name}" />
  </target>

<!--
  <target name="delete-tmp-jar"
          description="Delete the tmp jar for this project">
    <delete file="${app.name}.jar" quiet="true" />
  </target>
-->
    
<!-- ==================== Javadoc Target ================================== -->

<!--

  The "javadoc" target creates Javadoc API documentation for the Java
  classes included in your application.  Normally, this is only required
  when preparing a distribution release, but is available as a separate
  target in case the developer wants to create Javadocs independently.

-->

  <target name="javadoc" description="Create Javadoc API documentation">

    <mkdir dir="${javadoc.home}"/>
    <javadoc destdir="${javadoc.home}"
           packagenames="*">
      <fileset dir=".">
	<include name="src/**/*.java"/>
      </fileset>
      <classpath refid="compile.classpath"/>
    </javadoc>

  </target>


<!-- ==================== Check and Set Targets =========================== -->

  <target name="check-fits-jar">
    <available file="${fits.jar.home}/${fits.jar.name}" property="fits.jar.preset" />
  </target>

  <target name="check-build">
    <available file="${build.dir}" type="dir" property="build.present" />
  </target>

<!-- ========================= Release Targets ============================ -->
	<target name="release" depends="clean-compile-jar, check-fits-jar">
		<fail unless="fits.jar.preset" message="There is no ${fits.jar.name} in ${fits.jar.home}"/>
		<property name="output.location.version" 
			value="${output.location}/${app.name}-${build.version}"/>
		<mkdir dir="${output.location}" />
		<copy todir="${output.location.version}/xml">
			<fileset dir="xml">
		  		<exclude name="**/CVS"/>
				<exclude name="**/.cvsignore"/>
			</fileset>
		</copy>
		<copy todir="${output.location.version}/tools">
			<fileset dir="tools">
		  		<exclude name="**/CVS"/>
				<exclude name="**/.cvsignore"/>
			</fileset>
		</copy>
		<copy todir="${output.location.version}/lib">
			<fileset dir="lib">
		  		<exclude name="**/CVS"/>
				<exclude name="**/.cvsignore"/>
			</fileset>
		</copy>
        <copy todir="${output.location.version}/lib" file="${fits.jar.home}/${fits.jar.name}" description="copy fits.jar" />
		<copy todir="${output.location.version}/src">
			<fileset dir="src">
		  		<exclude name="**/CVS"/>
				<exclude name="**/.cvsignore"/>
				<exclude name="**/*.class"/>
			</fileset>
		</copy>
        <copy file="log4j.properties" todir="${output.location.version}"/>
		<copy file="cpappend.bat" todir="${output.location.version}"/>
		<copy file="fits.bat" todir="${output.location.version}"/>
		<copy file="fits.sh" todir="${output.location.version}"/>
		<copy file="fits-env.sh" todir="${output.location.version}"/>
		<copy file="fits-ngserver.sh" todir="${output.location.version}"/>
		<copy file="RELEASE.txt" todir="${output.location.version}"/>
		<copy file="COPYING" todir="${output.location.version}"/>
		<copy file="COPYING.LESSER" todir="${output.location.version}"/>
		<copy file="COPYING_APACHE_LICENSE_v2.txt" todir="${output.location.version}"/>
		<copy file="build.xml" todir="${output.location.version}"/>
		<copy file="version.properties" todir="${output.location.version}"/>
		<antcall target="zip-output" />
		<antcall target="delete-output" /> 
    </target>
	
	
	<target name="zip-output">
		<input message="Enter output location for zip file:" addproperty="zip.output"/>
		<zip basedir="${output.location}" destfile="${zip.output}/${app.name}-${build.version}.zip"/>
	</target>
	
	<target name="delete-output">
		<delete dir="${output.location}" quiet="true"/>
	</target>
	
    <target name="unit-tests" depends="compile">
    	<property name="halt.tests.on.failure" value="false"/> <!-- whether to terminate tests once first test failure encountered -->
        <property name="halt.tests.on.error" value="false"/> <!-- whether to terminate tests once first test error encountered -->
    	
    	<!-- Assumed ant-junit4.jar are already on classpath from Ant installation -->
    	<!-- see https://ant.apache.org/manual/Tasks/junit.html -->
        <junit fork="true" forkmode="once" logfailedtests="true" printsummary="withOutAndErr"
                haltonfailure="${halt.tests.on.failure}" haltonerror="${halt.tests.on.error}">
        	<classpath refid="junit.classpath" />
        	<classpath refid="compile.classpath" />
<!--
        	<classpath path="${test.dirs}" />
-->
            <classpath location="./xml/nlnz" />
            <classpath location="./xml/nlnz/fits" />
        	<batchtest skipNonTests="true" todir="${junit.reports.dir}">
        		<fileset dir="${test.dirs}">
        			<!-- tests to exclude due to known errors in tests -->
        			<exclude name="**/FitsOutputXmlTest.java"/>
                    <exclude name="**/FitsOutputXmlTest.class"/>
       			</fileset>
        	</batchtest>
        	<formatter type="plain"/>
        </junit>
    </target>

</project>
